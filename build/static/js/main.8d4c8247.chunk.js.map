{"version":3,"sources":["services/web3.js","components/SendTransferForm.js","abi/Transaction.js","App.js","serviceWorker.js","index.js"],"names":["portis","Portis","nodeUrl","chainId","web3","Web3","provider","TransactionContract","eth","Contract","SendTransferForm","props","state","senderAddress","receiverAddress","amount","senderBalance","receiverBalance","message","showPortis","this","console","log","methods","transferFunds","send","from","value","utils","toWei","toString","error","result","setState","isAddress","getBalance","fromWei","e","target","name","onLogin","checkBalance","onActiveWalletChanged","className","type","onClick","activateMenu","placeholder","disabled","required","onChange","bind","sendTransfer","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8d4c8247.chunk.js","sourcesContent":["import Portis from \"@portis/web3\";\nimport Web3 from 'web3';\n\nexport const portis = new Portis('fff564f8-0ef8-4eb3-8a68-ec74bc7f711b',{\n    nodeUrl: 'http://localhost:8545',\n    chainId: 1,\n\n});\nexport const web3 = new Web3(portis.provider);","import React, { Component } from 'react';\nimport {web3,portis} from \"../services/web3\";\n\nimport {abi} from \"../abi/Transaction.js\";\n\nconst contractAddress = '0x726F7341A0907709FfdEf583fDEa3d63eAF0E673';\nconst TransactionContract = new web3.eth.Contract(abi, contractAddress); \n\nexport default class SendTransferForm extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         senderAddress: '',\n         receiverAddress: '',\n         amount: 1,\n         senderBalance: 0,\n         receiverBalance: 0,\n         message: '',\n      };\n   }\n\n   activateMenu(){\n      portis.showPortis();\n   }\n\n   async sendTransfer(){\n      if(this.state.senderBalance>0){\n         try{\n            console.log(\"try started\");\n            await TransactionContract.methods\n               .transferFunds(this.state.receiverAddress)\n               .send({\n                  from:this.state.senderAddress,\n                  value:web3.utils.toWei(\n                     this.state.amount.toString(),\n                     'ether'\n                  )\n               },\n               (error,result)=>{\n                  if(error){\n                     console.log(\"I will give error\");\n                     this.setState({message:'error:'+error.message});\n                  }\n                  else{\n                     this.setState({message:'transaction hash:'+result});\n                  }\n               }\n               );\n            }\n         catch(error){\n            console.log(\"try failed\");\n            this.setState({message:'the transfer has failed'});\n         }\n         \n      }\n   }\n\n   async checkBalance(){\n      let senderBalance=0;\n      let receiverBalance=0;\n      let message='';\n\n      if(web3.utils.isAddress(this.state.senderAddress)) {\n            senderBalance=web3.utils.fromWei(\n                  await web3.eth.getBalance(this.state.senderAddress)\n            );\n      }\n      else{\n            message='Error: Incorrect etherum address for the sender';\n      }\n\n      if(this.state.receiverAddress){\n            if(web3.utils.isAddress(this.state.receiverAddress)){\n                  receiverBalance=web3.utils.fromWei(\n                        await web3.eth.getBalance(this.state.receiverAddress)\n                  );\n            }\n            else{\n                  message = 'Error: Incoreect etherum address for the receiver';\n            }\n      }\n      this.setState({senderBalance,receiverBalance,message});\n}\n\n   onChange(e) {\n      this.setState({ [e.target.name]: e.target.value });\n   }\n\n   componentDidMount() {\n      portis.onLogin((senderAddress)=>{\n         this.setState({senderAddress});\n         this.checkBalance();\n      })\n\n      portis.onActiveWalletChanged((senderAddress)=>{\n         this.setState({senderAddress});\n         this.checkBalance();\n      })\n   }\n\n   render() {\n      return (\n         <div>\n            <div className=\"row\">\n               <div className=\"nine columns smallTop\">\n                  {this.state.message && <b>{this.state.message}</b>}\n               </div>\n               <div className=\"three columns u-pull-right\">\n                  <button type=\"button\" className=\"u-full-width\" onClick={this.activateMenu}>\n                     Portis Menu\n                  </button>\n               </div>\n            </div>\n\n            <form>\n               <div className=\"row smallTop\">\n                  <div className=\"six columns\">\n                     <label>Sender Address</label>\n                     <input\n                        name=\"senderAddress\"\n                        value={this.state.senderAddress}\n                        type=\"text\"\n                        className=\"u-full-width\"\n                        placeholder=\"Loading...\"\n                        disabled\n                     />\n                  </div>\n                  <div className=\"six columns\">\n                     <label>Receiver Address</label>\n                     <input\n                        name=\"receiverAddress\"\n                        value={this.state.receiverAddress}\n                        type=\"text\"\n                        className=\"u-full-width\"\n                        placeholder=\"Enter the receiver address\"\n                        required\n                        onChange={this.onChange.bind(this)}\n                     />\n                  </div>\n               </div>\n               <div className=\"row\">\n                  <div className=\"six columns\">\n                     <label>Amount</label>\n                     <input\n                        name=\"amount\"\n                        value={this.state.amount}\n                        type=\"text\"\n                        className=\"u-full-width\"\n                        placeholder=\"Amount to send\"\n                        required\n                        onChange={this.onChange.bind(this)}\n                     />\n                  </div>\n                  <div className=\"three columns\">\n                     <label>Sender Balance</label>\n                     <p>{this.state.senderBalance} ETH</p>\n                  </div>\n                  <div className=\"three columns\">\n                     <label>Receiver Balance</label>\n                     <p>{this.state.receiverBalance} ETH</p>\n                  </div>\n               </div>\n               <div className=\"row\">\n                  <div className=\"six columns\">\n                     <button\n                        type=\"button\"\n                        className=\"button-primary u-full-width\"\n                        disabled={!this.state.receiverAddress}\n                        onClick={this.sendTransfer.bind(this)}\n                     >\n                        Transfer\n                     </button>\n                  </div>\n                  <div className=\"six columns\">\n                     <button type=\"button\" className=\"u-full-width\" onClick={this.checkBalance.bind(this)}>\n                        Check Balance\n                     </button>\n                  </div>\n               </div>\n            </form>\n         </div>\n      );\n   }\n}\n","export const abi = [\n    {\n      \"constant\": false,\n      \"inputs\": [\n        {\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"transferFunds\",\n      \"outputs\": [],\n      \"payable\": true,\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    }\n  ];","import React from 'react';\nimport SendTransferForm from './components/SendTransferForm';\n\nimport './css/normalize.css';\nimport './css/skeleton.css';\nimport './App.css';\n\nexport default function App() {\n   return (\n      <div className=\"App container\">\n         <header>\n            <h1>Ethereum Transfer</h1>\n         </header>\n         <SendTransferForm />\n      </div>\n   );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n   window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n         /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n);\n\nexport function register(config) {\n   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n         // Our service worker won't work if PUBLIC_URL is on a different origin\n         // from what our page is served on. This might happen if a CDN is used to\n         // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n         return;\n      }\n\n      window.addEventListener('load', () => {\n         const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n         if (isLocalhost) {\n            // This is running on localhost. Let's check if a service worker still exists or not.\n            checkValidServiceWorker(swUrl, config);\n\n            // Add some additional logging to localhost, pointing developers to the\n            // service worker/PWA documentation.\n            navigator.serviceWorker.ready.then(() => {\n               console.log(\n                  'This web app is being served cache-first by a service ' +\n                     'worker. To learn more, visit https://bit.ly/CRA-PWA'\n               );\n            });\n         } else {\n            // Is not localhost. Just register service worker\n            registerValidSW(swUrl, config);\n         }\n      });\n   }\n}\n\nfunction registerValidSW(swUrl, config) {\n   navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n         registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker == null) {\n               return;\n            }\n            installingWorker.onstatechange = () => {\n               if (installingWorker.state === 'installed') {\n                  if (navigator.serviceWorker.controller) {\n                     // At this point, the updated precached content has been fetched,\n                     // but the previous service worker will still serve the older\n                     // content until all client tabs are closed.\n                     console.log(\n                        'New content is available and will be used when all ' +\n                           'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                     );\n\n                     // Execute callback\n                     if (config && config.onUpdate) {\n                        config.onUpdate(registration);\n                     }\n                  } else {\n                     // At this point, everything has been precached.\n                     // It's the perfect time to display a\n                     // \"Content is cached for offline use.\" message.\n                     console.log('Content is cached for offline use.');\n\n                     // Execute callback\n                     if (config && config.onSuccess) {\n                        config.onSuccess(registration);\n                     }\n                  }\n               }\n            };\n         };\n      })\n      .catch((error) => {\n         console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n   // Check if the service worker can be found. If it can't reload the page.\n   fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n   })\n      .then((response) => {\n         // Ensure service worker exists, and that we really are getting a JS file.\n         const contentType = response.headers.get('content-type');\n         if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n         ) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then((registration) => {\n               registration.unregister().then(() => {\n                  window.location.reload();\n               });\n            });\n         } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config);\n         }\n      })\n      .catch(() => {\n         console.log(\n            'No internet connection found. App is running in offline mode.'\n         );\n      });\n}\n\nexport function unregister() {\n   if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n         .then((registration) => {\n            registration.unregister();\n         })\n         .catch((error) => {\n            console.error(error.message);\n         });\n   }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}